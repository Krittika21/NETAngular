// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsAspNet.Models;

namespace SportsAspNet.Migrations
{
    [DbContext(typeof(SportsContext))]
    [Migration("20190817114538_Update2")]
    partial class Update2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SportsAspNet.Models.TestDetailsList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.HasKey("ID");

                    b.ToTable("TestDetails");
                });

            modelBuilder.Entity("SportsAspNet.Models.TestType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TestName");

                    b.HasKey("ID");

                    b.ToTable("TestType");
                });

            modelBuilder.Entity("SportsAspNet.Models.TestTypeMap", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TestId");

                    b.Property<int>("TestTypeId");

                    b.HasKey("ID");

                    b.HasIndex("TestId")
                        .IsUnique();

                    b.HasIndex("TestTypeId");

                    b.ToTable("TestTypeMap");
                });

            modelBuilder.Entity("SportsAspNet.Models.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("userType");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SportsAspNet.Models.UserTypeMap", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CTDistance");

                    b.Property<string>("FitnessRating");

                    b.Property<double?>("STTime");

                    b.Property<int>("TestId");

                    b.Property<int>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTestMap");
                });

            modelBuilder.Entity("SportsAspNet.Models.TestTypeMap", b =>
                {
                    b.HasOne("SportsAspNet.Models.TestDetailsList", "TestDetail")
                        .WithOne("TestTypes")
                        .HasForeignKey("SportsAspNet.Models.TestTypeMap", "TestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportsAspNet.Models.TestType", "TestTypes")
                        .WithMany("TestTypes")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportsAspNet.Models.UserTypeMap", b =>
                {
                    b.HasOne("SportsAspNet.Models.TestDetailsList", "TestDetail")
                        .WithMany("UserTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportsAspNet.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
